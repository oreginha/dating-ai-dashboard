import { create } from 'zustand';
import { devtools, subscribeWithSelector } from 'zustand/middleware';

// Types
interface Profile {
  id: string;
  instagramUrl: string;
  name: string;
  age?: number;
  location?: string;
  compatibilityScore: number;
  status: 'discovered' | 'analyzed' | 'contacted' | 'active' | 'inactive';
  lastActivity?: Date;
  photos: string[];
  bio?: string;
  interests: string[];
}

interface Conversation {
  id: string;
  profileId: string;
  profileName: string;
  profilePhoto: string;
  messages: Message[];
  state: 'initiated' | 'active' | 'engaged' | 'opportunity' | 'inactive';
  lastMessageTime: Date;
  responseRate: number;
  engagementScore: number;
  nextScheduledAction?: Date;
}

interface Message {
  id: string;
  conversationId: string;
  content: string;
  type: 'sent' | 'received';
  timestamp: Date;
  isAutoGenerated: boolean;
  confidence?: number;
}

interface Opportunity {
  id: string;
  conversationId: string;
  profileName: string;
  profilePhoto: string;
  type: 'story_reaction' | 'online_status' | 'similar_interests' | 'time_pattern' | 'engagement_spike';
  description: string;
  confidence: number;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  detectedAt: Date;
  actionTaken: boolean;
  suggestedResponse?: string;
}

interface PendingMessage {
  id: string;
  conversationId: string;
  profileName: string;
  profilePhoto: string;
  variants: Array<{
    content: string;
    confidence: number;
    tone: string;
  }>;
  context: string;
  generatedAt: Date;
  expiresAt: Date;
}

interface SystemMetrics {
  dailyProfiles: number;
  weeklyProfiles: number;
  activeConversations: number;
  opportunitiesDetected: number;
  messagesApproved: number;
  responseRate: number;
  successRate: number;
}

interface WorkflowConfig {
  discoveryPipeline: {
    enabled: boolean;
    schedule: string;
    searchCriteria: string[];
    dailyLimit: number;
    minCompatibility: number;
    locations: string[];
    ageRange: [number, number];
  };
  conversationManager: {
    enabled: boolean;
    checkInterval: number;
    responseTimeThreshold: number;
    inactivityThreshold: number;
    autoEscalate: boolean;
  };
  opportunityDetector: {
    enabled: boolean;
    sensitivityLevel: 'low' | 'medium' | 'high';
    enabledOpportunityTypes: string[];
    confidenceThreshold: number;
    realTimeAlerts: boolean;
  };
  autoResponseSystem: {
    enabled: boolean;
    autoSendEnabled: boolean;
    autoSendThreshold: number;
    approvalTimeoutHours: number;
    generateVariantCount: number;
    requireApproval: boolean;
  };
}

interface AppState {
  // System Status
  isConnected: boolean;
  lastSync: Date;
  systemStatus: 'online' | 'offline' | 'syncing' | 'error';
  
  // Data
  profiles: Profile[];
  conversations: Conversation[];
  opportunities: Opportunity[];
  pendingMessages: PendingMessage[];
  metrics: SystemMetrics;
  
  // Configuration
  config: WorkflowConfig;
  
  // UI State
  selectedWorkflow: string;
  notifications: Array<{
    id: string;
    type: 'info' | 'success' | 'warning' | 'error';
    title: string;
    message: string;
    timestamp: Date;
    read: boolean;
  }>;
  
  // Actions
  setConnectionStatus: (status: boolean) => void;
  setSystemStatus: (status: 'online' | 'offline' | 'syncing' | 'error') => void;
  updateMetrics: (metrics: Partial<SystemMetrics>) => void;
  
  // Profile Actions
  addProfile: (profile: Profile) => void;
  updateProfile: (id: string, updates: Partial<Profile>) => void;
  removeProfile: (id: string) => void;
  
  // Conversation Actions
  addConversation: (conversation: Conversation) => void;
  updateConversation: (id: string, updates: Partial<Conversation>) => void;
  addMessage: (conversationId: string, message: Message) => void;
  
  // Opportunity Actions
  addOpportunity: (opportunity: Opportunity) => void;
  updateOpportunity: (id: string, updates: Partial<Opportunity>) => void;
  dismissOpportunity: (id: string) => void;
  
  // Pending Messages Actions
  addPendingMessage: (message: PendingMessage) => void;
  approvePendingMessage: (id: string, variantIndex: number) => void;
  rejectPendingMessage: (id: string) => void;
  editAndSendMessage: (id: string, content: string) => void;
  
  // Configuration Actions
  updateConfig: (workflow: keyof WorkflowConfig, updates: any) => void;
  
  // UI Actions
  setSelectedWorkflow: (workflow: string) => void;
  addNotification: (notification: Omit<AppState['notifications'][0], 'id' | 'timestamp' | 'read'>) => void;
  markNotificationRead: (id: string) => void;
  clearNotifications: () => void;
}

export const useAppStore = create<AppState>()(
  devtools(
    subscribeWithSelector((set) => ({
      // Initial State
      isConnected: false,
      lastSync: new Date(),
      systemStatus: 'offline',
      profiles: [],
      conversations: [],
      opportunities: [],
      pendingMessages: [],
      metrics: {
        dailyProfiles: 0,
        weeklyProfiles: 0,
        activeConversations: 0,
        opportunitiesDetected: 0,
        messagesApproved: 0,
        responseRate: 0,
        successRate: 0,
      },
      config: {
        discoveryPipeline: {
          enabled: true,
          schedule: '0 9,15,21 * * *', // 3 times a day
          searchCriteria: ['photography', 'travel', 'fitness'],
          dailyLimit: 20,
          minCompatibility: 70,
          locations: ['Madrid', 'Barcelona'],
          ageRange: [25, 35],
        },
        conversationManager: {
          enabled: true,
          checkInterval: 4, // hours
          responseTimeThreshold: 24, // hours
          inactivityThreshold: 7, // days
          autoEscalate: true,
        },
        opportunityDetector: {
          enabled: true,
          sensitivityLevel: 'medium',
          enabledOpportunityTypes: ['story_reaction', 'online_status', 'similar_interests'],
          confidenceThreshold: 75,
          realTimeAlerts: true,
        },
        autoResponseSystem: {
          enabled: true,
          autoSendEnabled: false,
          autoSendThreshold: 85,
          approvalTimeoutHours: 12,
          generateVariantCount: 3,
          requireApproval: true,
        },
      },
      selectedWorkflow: 'dashboard',
      notifications: [],

      // Actions
      setConnectionStatus: (status) => set({ isConnected: status }),
      setSystemStatus: (status) => set({ systemStatus: status }),
      updateMetrics: (metrics) => set((state) => ({ 
        metrics: { ...state.metrics, ...metrics },
        lastSync: new Date()
      })),

      // Profile Actions
      addProfile: (profile) => set((state) => ({ 
        profiles: [...state.profiles, profile] 
      })),
      updateProfile: (id, updates) => set((state) => ({
        profiles: state.profiles.map(p => p.id === id ? { ...p, ...updates } : p)
      })),
      removeProfile: (id) => set((state) => ({
        profiles: state.profiles.filter(p => p.id !== id)
      })),

      // Conversation Actions
      addConversation: (conversation) => set((state) => ({
        conversations: [...state.conversations, conversation]
      })),
      updateConversation: (id, updates) => set((state) => ({
        conversations: state.conversations.map(c => c.id === id ? { ...c, ...updates } : c)
      })),
      addMessage: (conversationId, message) => set((state) => ({
        conversations: state.conversations.map(c => 
          c.id === conversationId 
            ? { ...c, messages: [...c.messages, message], lastMessageTime: message.timestamp }
            : c
        )
      })),

      // Opportunity Actions
      addOpportunity: (opportunity) => set((state) => ({
        opportunities: [...state.opportunities, opportunity]
      })),
      updateOpportunity: (id, updates) => set((state) => ({
        opportunities: state.opportunities.map(o => o.id === id ? { ...o, ...updates } : o)
      })),
      dismissOpportunity: (id) => set((state) => ({
        opportunities: state.opportunities.filter(o => o.id !== id)
      })),

      // Pending Messages Actions
      addPendingMessage: (message) => set((state) => ({
        pendingMessages: [...state.pendingMessages, message]
      })),
      approvePendingMessage: (id, _variantIndex) => set((state) => ({
        pendingMessages: state.pendingMessages.filter(m => m.id !== id)
      })),
      rejectPendingMessage: (id) => set((state) => ({
        pendingMessages: state.pendingMessages.filter(m => m.id !== id)
      })),
      editAndSendMessage: (id, _content) => set((state) => ({
        pendingMessages: state.pendingMessages.filter(m => m.id !== id)
      })),

      // Configuration Actions
      updateConfig: (workflow, updates) => set((state) => ({
        config: {
          ...state.config,
          [workflow]: { ...state.config[workflow], ...updates }
        }
      })),

      // UI Actions
      setSelectedWorkflow: (workflow) => set({ selectedWorkflow: workflow }),
      addNotification: (notification) => set((state) => ({
        notifications: [...state.notifications, {
          ...notification,
          id: Date.now().toString(),
          timestamp: new Date(),
          read: false,
        }]
      })),
      markNotificationRead: (id) => set((state) => ({
        notifications: state.notifications.map(n => 
          n.id === id ? { ...n, read: true } : n
        )
      })),
      clearNotifications: () => set({ notifications: [] }),
    })),
    { name: 'dating-ai-store' }
  )
);

// Selectors for better performance
export const useProfiles = () => useAppStore(state => state.profiles);
export const useConversations = () => useAppStore(state => state.conversations);
export const useOpportunities = () => useAppStore(state => state.opportunities);
export const usePendingMessages = () => useAppStore(state => state.pendingMessages);
export const useMetrics = () => useAppStore(state => state.metrics);
export const useConfig = () => useAppStore(state => state.config);
export const useSystemStatus = () => useAppStore(state => ({
  isConnected: state.isConnected,
  systemStatus: state.systemStatus,
  lastSync: state.lastSync,
}));
